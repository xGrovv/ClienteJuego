/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import cliente.ClienteSocket;
import cliente.Comunicacion;
import cliente.DoublePoint;
import cliente.Jugador;
import cliente.MapaControl;
import eventos.ClienteSocketEvent;
import eventos.ClienteSocketListener;
import eventos.MapaModeloEvent;
import eventos.MapaModeloListener;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author Juan Pablo
 */
public class Juego extends javax.swing.JFrame {

    //private final String IP_SERVER = "192.168.43.236";
    private final String IP_SERVER = "localhost";
    private final int PORT_SERVER = 4455;
    private int nroConexion;
    // private cliente.ClienteJuego clienteJuego = null;
    private ClienteSocket clienteSocket;
    private Comunicacion comunicacion = null;
    private MapaControl mapaControl = null;
    private mapaDibujo mapaDibujo1;
    private boolean lider;
    private Jugador jugador = null;

    public static final int ESTADO_NO_CONECTADO = 1;    // aun no conectado al server
    public static final int ESTADO_CONECTADO = 10;    // solo conectado a nivel socket
    public static final int ESTADO_REGISTRADO = 20;    // conectado y registrado con un nick
    public static final int ESTADO_PARTIDA = 30; // esta registrado e incluido en una pardida
    public static final int ESTADO_JUEGO = 40;    // esta en una partida que esta en juego (iniciado)

    private int estado;
    private boolean conexionPerdida;

    /**
     * Creates new form Juego
     */
    public Juego() {
        initComponents();
        lbStatus.setText("iniciando  ... ");
        actionEnter();
        lider = false;

        btJugar.setVisible(false);
        miInicio();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbStatus = new javax.swing.JLabel();
        panelInicio = new javax.swing.JPanel();
        lbJugador = new javax.swing.JLabel();
        txtJugador = new javax.swing.JTextField();
        btReg = new javax.swing.JButton();
        btJugar = new javax.swing.JButton();
        lbMensaje = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JUEGO LABERINTO");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lbStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbStatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        panelInicio.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inicio de Juego", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        lbJugador.setText("Jugador");

        txtJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJugadorActionPerformed(evt);
            }
        });

        btReg.setText("REGISTRARSE");
        btReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegActionPerformed(evt);
            }
        });

        btJugar.setText("JUGAR");
        btJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btJugarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInicioLayout = new javax.swing.GroupLayout(panelInicio);
        panelInicio.setLayout(panelInicioLayout);
        panelInicioLayout.setHorizontalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInicioLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(lbJugador)
                        .addGap(18, 18, 18)
                        .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btJugar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btReg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(panelInicioLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lbMensaje)))
                .addContainerGap(168, Short.MAX_VALUE))
        );
        panelInicioLayout.setVerticalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbJugador)
                    .addComponent(txtJugador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btReg)
                .addGap(18, 18, 18)
                .addComponent(btJugar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(lbMensaje)
                .addContainerGap())
        );

        jMenu2.setText("JUEGO");

        jMenuItem4.setText("REGISTRARSE");
        jMenu2.add(jMenuItem4);

        jMenuItem1.setText("CREAR");
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("JUGAR");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("SALIR");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 584, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1)))
                .addGap(44, 44, 44)
                .addComponent(panelInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(368, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miInicio() {
        nroConexion = 0;
        panelInicioEntornoNoConectado();
        estado = Juego.ESTADO_NO_CONECTADO;
        comunicacion = new Comunicacion();
        clienteSocket = new ClienteSocket(IP_SERVER, PORT_SERVER);
        clienteSocket.iniciar();
        jugador = new Jugador("none", new Byte("0"));
        clienteSocket.addListenerEvent(new ClienteSocketListener() {
            @Override
            public void onConnected(ClienteSocketEvent ev) {
                if (conexionPerdida){
                    if (estado == Juego.ESTADO_JUEGO) {
                        conexionPerdida=false;
                        // ponerme la ventana activa y jugador desbloqueado
                    }
                }
                nroConexion++;
                if (estado == Juego.ESTADO_NO_CONECTADO) {
                    estado = Juego.ESTADO_CONECTADO;
                    lbStatus.setText("Conectado >>" + nroConexion);
                    panelInicioEntornoConectado();
                }

                if (estado == Juego.ESTADO_CONECTADO) {

                }

                if (estado == Juego.ESTADO_JUEGO) {

                }

            }

            @Override
            public void onLostConnection(ClienteSocketEvent ev) {
                conexionPerdida= true;
                System.out.println(">>>>>Juego.onLostConnection()");
                lbStatus.setText("Conexion Perdida>>");
                jLabel1.setText("conexion perdida, intentando reconectar...!!!");
            }

            @Override
            public void onFailConnection(ClienteSocketEvent ev) {
                lbStatus.setText("fallo en intento de Conexion>>");
            }

            @Override
            public void onMessageReceive(ClienteSocketEvent ev) {
                String rec = (String) ev.getSource();
                System.out.println("---"+ rec);
                if (rec.contains("[lider]")) {
                    lider = true;
                    btJugar.setVisible(true);
                    btJugar.setEnabled(true);
                }

                if (rec.contains("[reg]done")) {
                    String nroJ = rec.substring(rec.indexOf('>') + 1);
                    Byte miNro = Byte.parseByte(nroJ);
                    lbStatus.setText(jugador.getNickname());

                    clienteSocket.EnviarMensaje(comunicacion.PedirMapa());
                    jugador.setNickname(txtJugador.getText());
                    jugador.setNro(miNro);
                    panelInicioEntornoRegistrado();
                }

                if (rec.contains("[reg-no]")) {  //
                    //System.out.println("nick ya existe");
                    lbMensaje.setText("Nickname ya exixte escriba otro");
                }

                if (rec.contains("[reg]enjuego")) {
                    lbMensaje.setText(" ya hay un juego iniciado, intentelo luego");
                }

                if (rec.contains("[jugar-no]>")) {
                    System.out.println(rec.substring(rec.indexOf('>')));
                }

                if (rec.contains("[jugar-done]")) {
                    panelInicioEntornoJuego();
                    mapaDibujo1.requestFocus();
                }

                if (rec.contains("[dateconnection]>")) {
                    long date = Long.parseLong(rec.substring(rec.indexOf('>') + 1));
                    jugador.setDateconnection(date);
                }
                
                if (rec.contains("[reconectado]>")) {  //
                    String nroJ = rec.substring(rec.indexOf(">") + 1, rec.indexOf("_"));
                    String posX = rec.substring(rec.indexOf("_") + 1, rec.indexOf("-"));
                    String posY = rec.substring(rec.indexOf("-") + 1);
                    if (Integer.parseInt(nroJ)==jugador.getNro()){
                       
                    }
                    mapaControl.cambiarValor(Byte.parseByte(nroJ), Integer.parseInt(posX), Integer.parseInt(posY));
                }

                if (rec.contains("[dateconnection_request]")) { //
                    clienteSocket.EnviarMensaje(comunicacion.date(jugador.getDateconnection()));
                }

                if (rec.contains("[map]")) {
                    System.out.println("mapa " + rec.substring(9980, rec.length()));
                    String mapaString = rec.substring(5);   // 5 es cantidad de caracteres del comando [map]
                    mapaControl = new MapaControl(100, 100, mapaString);   // 100*100 dimencion de la matriz
                    mapaControl.addListener(new MapaModeloListener() {
                        @Override
                        public void onChangeMapaModelo(MapaModeloEvent ev) {
                            // si posiciones pos1 estan incluidas en el minimapa hacer
                            DoublePoint pos = (DoublePoint) ev.getSource();
                            if (((mapaDibujo1.posIncluida(pos.posX1, pos.posY1))) || (mapaDibujo1.posIncluida(pos.posX2, pos.posY2))) {
                                mapaDibujo1.actualizarMinimatriz(jugador.getPosX(), jugador.getPosY());
                                mapaDibujo1.repaint();
                            }//hh

                        }

                        @Override
                        public void onChangeMapaModeloUnValor(MapaModeloEvent ev) {
                            Point pos = (Point) ev.getSource();
                            if (mapaDibujo1.posIncluida(pos.x, pos.y)) {
                                mapaDibujo1.actualizarMinimatriz(jugador.getPosX(), jugador.getPosY());
                                mapaDibujo1.repaint();
                            }
                        }
                    });
                    clienteSocket.EnviarMensaje(comunicacion.pedirPosicion()); // requerimiento de posiciones de jugadores
                    //mostrar el submapa en el panel

                }

                if (rec.contains("[pos]")) {  // entrega de posicion de un jugador   <15_45-100>
                    String nroJ = rec.substring(rec.indexOf("<") + 1, rec.indexOf("_"));
                    String posX = rec.substring(rec.indexOf("_") + 1, rec.indexOf("-"));
                    String posY = rec.substring(rec.indexOf("-") + 1, rec.indexOf(">"));
                    if (jugador.getNro() == Byte.parseByte(nroJ)) {
                        jugador.setPosX(Integer.parseInt(posX));
                        jugador.setPosY(Integer.parseInt(posY));
                        mapaControl.addJugador(Byte.parseByte(nroJ), Integer.parseInt(posX), Integer.parseInt(posY));
                        iniciarMapaDidujo();
                        panelInicio.repaint();

                    } else {
                        mapaControl.addJugador(Byte.parseByte(nroJ), Integer.parseInt(posX), Integer.parseInt(posY));
                    }

                }
                
                if (rec.contains("[jugador.pausado]>")) {
                    String nroJ = rec.substring(rec.indexOf('>') + 1, rec.indexOf('_'));                    
                    String posX = rec.substring(rec.indexOf('_') + 1, rec.indexOf('-'));
                    String posY = rec.substring(rec.indexOf('-') + 1);
                    System.out.println("jugador pausado:"+ nroJ);                    
                    //jugador.setNro((byte)(100+jugador.getNro()));
                    mapaControl.cambiarValor((byte)(Byte.parseByte(nroJ)+100), Integer.parseInt(posX), Integer.parseInt(posY));
                }
                
                if (rec.contains("[jugador.quitado]>")) {
                    String nroJ = rec.substring(rec.indexOf('>') + 1, rec.indexOf('_'));                    
                    String posX = rec.substring(rec.indexOf('_') + 1, rec.indexOf('-'));
                    String posY = rec.substring(rec.indexOf('-') + 1);
                    mapaControl.cambiarValor((byte)0, Integer.parseInt(posX), Integer.parseInt(posY));
                }
                
                if (rec.contains("[move]>")) {
                    String nroJ  = rec.substring(rec.indexOf(">") + 1, rec.indexOf("_"));
                    String posX1 = rec.substring(rec.indexOf("_") + 1, rec.indexOf("-"));
                    String posY1 = rec.substring(rec.indexOf("-") + 1, rec.indexOf("*"));
                    String posX2 = rec.substring(rec.indexOf("*") + 1, rec.indexOf("@"));
                    String posY2 = rec.substring(rec.indexOf("@") + 1);
                    if (jugador.getNro() == Integer.parseInt(nroJ)) {
                        jugador.setPosX(Integer.parseInt(posX2));
                        jugador.setPosY(Integer.parseInt(posY2));
                    }
                    mapaControl.cambiarValores( Integer.parseInt(posX1) , Integer.parseInt(posY1), Integer.parseInt(posX2), Integer.parseInt(posY2));
                }

            }
        });

        //conectar al server
        // si no conecta mostrar mensaje de servidor inactivo
        //panelJuego.setVisible(false);
        //panelInicio.setVisible(true);
    }

    public void keyPressedAction2(int keyCode) {
        //capturamos la nueva posicion
        int posX1, posX2;
        posX1 = posX2 = jugador.getPosX();
        int posY1, posY2;
        posY1 = posY2 = jugador.getPosY();
        switch (keyCode) {
            case KeyEvent.VK_LEFT:
                posX2 = jugador.getPosX() - 1;
                break;
            case KeyEvent.VK_UP:
                posY2 = jugador.getPosY() - 1;
                break;
            case KeyEvent.VK_RIGHT:
                posX2 = jugador.getPosX() + 1;
                break;
            case KeyEvent.VK_DOWN:
                posY2 = jugador.getPosY() + 1;
                break;
        }
        // si es una posicion libre y valida
        if (mapaControl.posicionLibre(posX2, posY2)) {
            jugador.setPosX(posX2);
            jugador.setPosY(posY2);
            // intercambio de anterior pos  contra  nueva pos
            clienteSocket.EnviarMensaje("[move]>"+jugador.getNro()+"_"+ posX1+"-"+posY1+"*"+posX2+"@"+posY2);
        } else {
            System.out.println("pos invalida o NO-Libre");
        }
        
    }
    
    public void keyPressedAction(int keyCode) {
        //capturamos la nueva posicion
        int posX1, posX2;
        posX1 = posX2 = jugador.getPosX();
        int posY1, posY2;
        posY1 = posY2 = jugador.getPosY();
        switch (keyCode) {
            case KeyEvent.VK_LEFT:
                posX2 = jugador.getPosX() - 1;
                break;
            case KeyEvent.VK_UP:
                posY2 = jugador.getPosY() - 1;
                break;
            case KeyEvent.VK_RIGHT:
                posX2 = jugador.getPosX() + 1;
                break;
            case KeyEvent.VK_DOWN:
                posY2 = jugador.getPosY() + 1;
                break;
        }
        // si es una posicion libre y valida
        if (mapaControl.posicionLibre(posX2, posY2)) {
            jugador.setPosX(posX2);
            jugador.setPosY(posY2);
            // intercambio de anterior pos  contra  nueva pos
            mapaControl.cambiarValores(posX1, posY1, posX2, posY2);
            //mapaDibujo1.actualizarMinimatriz(jugador.getPosX(), jugador.getPosY());
            //mapaDibujo1.repaint();
        } else {
            System.out.println("pos invalida o NO-Libre");
        }

    }

    public void panelInicioEntornoNoConectado() {
        panelInicio.setVisible(true);
        txtJugador.setEnabled(false);
        btJugar.setEnabled(false);
        btReg.setEnabled(false);
        lbMensaje.setText("Conectando al servidor");
    }

    public void panelInicioEntornoConectado() {
        panelInicio.setVisible(true);
        txtJugador.setEnabled(true);
        btJugar.setEnabled(true);
        btReg.setEnabled(true);
        lbMensaje.setText("Conectado: ahora debe registrarse");
    }

    public void panelInicioEntornoRegistrado() {
        panelInicio.setVisible(true);
        txtJugador.setEnabled(false);
        //btJugar.setEnabled(false);
        btReg.setEnabled(false);
        lbMensaje.setText("Registrado:  Espere el inicio del juego");
    }

    public void panelInicioEntornoJuego() {
        panelInicio.setVisible(false);
    }

    public void iniciarMapaDidujo() {
        mapaDibujo1 = new mapaDibujo(mapaControl, jugador.getPosX(), jugador.getPosY());
        this.add(mapaDibujo1);
        mapaDibujo1.repaint();
        mapaDibujo1.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int key = e.getKeyCode();
                keyPressedAction2(key);
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void btRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegActionPerformed
        // TODO add your handling code here 
        if (!"".equals(txtJugador.getText())) {
            clienteSocket.EnviarMensaje(comunicacion.Registrar(txtJugador.getText()));
        }
    }//GEN-LAST:event_btRegActionPerformed

    private void btJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btJugarActionPerformed

        clienteSocket.EnviarMensaje(comunicacion.jugar());
    }//GEN-LAST:event_btJugarActionPerformed

    private void txtJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJugadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtJugadorActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(clienteSocket!=null)
            clienteSocket.EnviarMensaje("[salir]");
        System.out.println("vista.Juego.formWindowClosing()");
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btJugar;
    private javax.swing.JButton btReg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JLabel lbJugador;
    private javax.swing.JLabel lbMensaje;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JPanel panelInicio;
    private javax.swing.JTextField txtJugador;
    // End of variables declaration//GEN-END:variables

    private void actionEnter() {
        txtJugador.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!"".equals(txtJugador.getText())) {
                    clienteSocket.EnviarMensaje(comunicacion.Registrar(txtJugador.getText()));
                }
            }
        });
    }

}
