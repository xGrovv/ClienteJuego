/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import cliente.ClienteSocket;
import cliente.Comunicacion;
import cliente.Jugador;
import cliente.MapaControl;
import eventos.ClienteSocketEvent;
import eventos.ClienteSocketListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author Juan Pablo
 */
public class Juego extends javax.swing.JFrame {
    
    private final String IP_SERVER="192.168.43.23";
    private final int PORT_SERVER=4455;
    private int nroConexion;
   // private cliente.ClienteJuego clienteJuego = null;
    private ClienteSocket clienteSocket;
    private Comunicacion comunicacion = null;
    private MapaControl mapaControl=null;
    private mapaDibujo mapaDibujo1;
            
    private Jugador jugador = null;
    
    public static final int ESTADO_NO_CONECTADO=1;    // aun no conectado al server
    public static final int ESTADO_CONECTADO=10;    // solo conectado a nivel socket
    public static final int ESTADO_REGISTRADO=20;    // conectado y registrado con un nick
    public static final int ESTADO_PARTIDA=30; // esta registrado e incluido en una pardida
    public static final int ESTADO_JUEGO=40;    // esta en una partida que esta en juego (iniciado)
    
    private int estado;

    /**
     * Creates new form Juego
     */
    public Juego() {
        initComponents();
        jLMsj.setText("iniciando  ... ");
        actionEnter();
        //jBJugar.setVisible(false);
        miInicio();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLMsj = new javax.swing.JLabel();
        panelInicio = new javax.swing.JPanel();
        lbJugador = new javax.swing.JLabel();
        txtJugador = new javax.swing.JTextField();
        btReg = new javax.swing.JButton();
        jBJugar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JUEGO LABERINTO");

        jLMsj.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLMsj.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        panelInicio.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inicio de Juego", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        lbJugador.setText("Jugador");

        txtJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJugadorActionPerformed(evt);
            }
        });

        btReg.setText("REGISTRARSE");
        btReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInicioLayout = new javax.swing.GroupLayout(panelInicio);
        panelInicio.setLayout(panelInicioLayout);
        panelInicioLayout.setHorizontalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(lbJugador)
                .addGap(18, 18, 18)
                .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btReg))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        panelInicioLayout.setVerticalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbJugador)
                    .addComponent(txtJugador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btReg)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jBJugar.setText("JUGAR");
        jBJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBJugarActionPerformed(evt);
            }
        });

        jMenu2.setText("JUEGO");

        jMenuItem4.setText("REGISTRARSE");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem1.setText("CREAR");
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("JUGAR");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("SALIR");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(629, Short.MAX_VALUE)
                .addComponent(jBJugar)
                .addGap(204, 204, 204)
                .addComponent(jLMsj, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(243, 243, 243)
                    .addComponent(panelInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(534, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLMsj, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBJugar))
                .addContainerGap(594, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(200, 200, 200)
                    .addComponent(panelInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(292, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miInicio(){
        nroConexion=0;
        estado=Juego.ESTADO_NO_CONECTADO;
        comunicacion = new Comunicacion();
        clienteSocket=new ClienteSocket(IP_SERVER, PORT_SERVER);
        clienteSocket.iniciar();
        jugador= new Jugador("none",  new Byte("0"));
        clienteSocket.addListenerEvent(new ClienteSocketListener() {
            @Override
            public void onConnected(ClienteSocketEvent ev) {
                nroConexion++;
                if (estado==Juego.ESTADO_NO_CONECTADO){
                    estado=Juego.ESTADO_CONECTADO;
                    jLMsj.setText("Conectado >>"+nroConexion);
                    panelInicio.setVisible(true);
                }
                
                if (estado==Juego.ESTADO_CONECTADO){
                    
                }
                
                if (estado==Juego.ESTADO_JUEGO){
                    
                }
                
            }

            @Override
            public void onLostConnection(ClienteSocketEvent ev) {
                jLMsj.setText("Conexion Perdida>>");
            }

            @Override
            public void onFailConnection(ClienteSocketEvent ev) {
                jLMsj.setText("fallo en intento de Conexion>>");
            }

            @Override
            public void onMessageReceive(ClienteSocketEvent ev) {
                String rec = (String) ev.getSource();
                
                if(rec.contains("[reg]done")){  
                    //antes de registrar validar si hay conexion
                    String nroJ= rec.substring(rec.indexOf('>')+1);
                    Byte miNro=Byte.parseByte(nroJ);
                    if (miNro==11)
                    jBJugar.setEnabled(true);
                    panelInicio.setVisible(false);
                    //panelJuego.setVisible(true);
                    jLMsj.setText(txtJugador.getText());
                    
                    clienteSocket.EnviarMensaje(comunicacion.PedirMapa());
                    jugador.setNickname(txtJugador.getText());
                    jugador.setNro(miNro);
                    
                }
                
               if(rec.contains("[reg-no]")){  //
                   System.out.println("nick ya existe");
                   //mostrar menssaje en la pantalla
                }  
               
                if(rec.contains("[dateconnection]>")){  //
                   long date = Long.parseLong(rec.substring(rec.indexOf('>')+1));
                   jugador.setDateconnection(date);
                   System.out.println(date);
                   //mostrar menssaje en la pantalla
                }
                
                if(rec.contains("[dateconnection_request]")){ //
                    clienteSocket.EnviarMensaje( comunicacion.date(jugador.getDateconnection()) );
                }
                
                if(rec.contains("[map]")){
                    System.out.println("mapa "+rec.substring(9980,rec.length()));
                    String mapaString = rec.substring(5);   // 5 es cantidad de caracteres del comando [map]
                    mapaControl = new MapaControl(100, 100, mapaString);   // 100*100 dimencion de la matriz
                    clienteSocket.EnviarMensaje(comunicacion.pedirPosicion()); // requerimiento de posiciones de jugadores
                    //mostrar el submapa en el panel
                    
                }
                
                if(rec.contains("[pos]")){  // entrega de posicion de un jugador   <15_45-100>
                    System.out.println(rec);
                    String nroJ = rec.substring(rec.indexOf("<")+1, rec.indexOf("_"));
                    String posX = rec.substring(rec.indexOf("_")+1, rec.indexOf("-"));
                    String posY = rec.substring(rec.indexOf("-")+1, rec.indexOf(">"));
                    if (jugador.getNro() == Byte.parseByte(nroJ)) {
                        jugador.setPosX( Integer.parseInt( posX));
                        jugador.setPosY( Integer.parseInt( posY));
                    }
                    
                    mapaControl.addJugador(Byte.parseByte(nroJ), Integer.parseInt(posX), Integer.parseInt(posY));
                    
                }
                

            }
        });
        
        //conectar al server
        // si no conecta mostrar mensaje de servidor inactivo
        //panelJuego.setVisible(false);
        panelInicio.setVisible(true);
    }    
    
    public void keyPressedAction(int keyCode){
        //capturamos la nueva posicion
        int posX1,posX2; posX1=posX2=jugador.getPosX();
        int posY1,posY2; posY1=posY2=jugador.getPosY();
        switch (keyCode){
            case KeyEvent.VK_LEFT:  
                posX2=jugador.getPosX()-1;
                break;
            case KeyEvent.VK_UP:
                posY2=jugador.getPosY()-1;
                break;
            case KeyEvent.VK_RIGHT:
                posX2=jugador.getPosX()+1;
                break;
            case KeyEvent.VK_DOWN:
                posY2=jugador.getPosY()+1;
                break;
        }
        // si es una posicion libre y valida
        if(mapaControl.posicionLibre(posX2, posY2)){
            jugador.setPosX(posX2);
            jugador.setPosY(posY2);  
            // intercambio de anterior pos  contra  nueva pos
            mapaControl.cambiarValores(posX1, posY1, posX2, posY2);
            mapaDibujo1.actualizarMinimatriz(jugador.getPosX(), jugador.getPosY());
            mapaDibujo1.repaint();
        }
        else
            System.out.println("pos invalida o NO-Libre");
        
        
    }
    
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        //jugador.setPosX(97);
        //jugador.setPosY(98);
        mapaControl.addJugador(jugador.getNro(), jugador.getPosX(), jugador.getPosY());
        panelInicio.setVisible(false);
        mapaDibujo1= new mapaDibujo(mapaControl, jugador.getPosX(), jugador.getPosY());
        this.add(mapaDibujo1);
        mapaDibujo1.repaint();
        mapaDibujo1.requestFocus();
        mapaDibujo1.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int key = e.getKeyCode();
                keyPressedAction(key);
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void btRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegActionPerformed
        // TODO add your handling code here
        
        if (!"".equals(txtJugador.getText())) {
            clienteSocket.EnviarMensaje(comunicacion.Registrar( txtJugador.getText() ));
        }
       
        
    }//GEN-LAST:event_btRegActionPerformed

    private void jBJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBJugarActionPerformed
         
        clienteSocket.EnviarMensaje(comunicacion.jugar());
        
        
        
    }//GEN-LAST:event_jBJugarActionPerformed

    private void txtJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJugadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtJugadorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btReg;
    private javax.swing.JButton jBJugar;
    private javax.swing.JLabel jLMsj;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JLabel lbJugador;
    private javax.swing.JPanel panelInicio;
    private javax.swing.JTextField txtJugador;
    // End of variables declaration//GEN-END:variables

    private void actionEnter() {
        txtJugador.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!"".equals(txtJugador.getText())) {
                    clienteSocket.EnviarMensaje(comunicacion.Registrar( txtJugador.getText() ));
                   }
            }
        });
    }

   
    
}
